import streamlit as st
import osmnx as ox
import networkx as nx
import folium
import pandas as pd
import numpy as np
import random
import math
import datetime
import time
import json
from geopy.distance import geodesic
import streamlit.components.v1 as components

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Sistema Experto de Emergencias",
    page_icon="üö®",
    layout="wide",
    initial_sidebar_state="expanded"
)

# T√≠tulo principal seg√∫n especificaciones del proyecto
st.title("üö® Sistema Experto de Soporte a la Decisi√≥n para Optimizaci√≥n de Rutas de Emergencia")
st.markdown("*Modelo de Costo Dual Dependiente del Tiempo - Tacna, Per√∫*")
st.markdown("---")

# --- Funciones de Cache y Carga del Grafo ---
@st.cache_data
def cargar_grafo_tacna():
    """
    Carga un grafo enriquecido de Tacna con atributos est√°ticos para el modelo probabil√≠stico.
    """
    try:
        place = "Tacna, Peru"
        # Crear grafo dirigido simplificado y fuertemente conectado
        G = ox.graph_from_place(place, network_type='drive', simplify=True)
        
        # Asegurar conectividad fuerte para evitar islas
        if not nx.is_strongly_connected(G):
            largest_scc = max(nx.strongly_connected_components(G), key=len)
            G = G.subgraph(largest_scc).copy()

        # Convertir a enteros para compatibilidad con JavaScript
        G = nx.convert_node_labels_to_integers(G, label_attribute='osmid')
        
        # Enriquecimiento del grafo con atributos est√°ticos
        for u, v, key, data in G.edges(data=True, keys=True):
            # Longitud del arco
            length = data.get('length', 100)
            
            # Clasificar tipo de v√≠a basado en atributos OSM
            highway = data.get('highway', 'residential')
            if isinstance(highway, list):
                highway = highway[0]
            
            # Mapeo de tipos de v√≠a seg√∫n especificaciones
            if highway in ['primary', 'trunk', 'motorway']:
                tipo_via = 'avenida_principal'
                velocidad_base = 50
                sigma_base = 20
                factor_calidad = 1.2
            elif highway in ['secondary', 'tertiary']:
                tipo_via = 'calle_colectora'
                velocidad_base = 40
                sigma_base = 18
                factor_calidad = 1.3
            elif highway in ['residential', 'living_street']:
                tipo_via = 'calle_residencial'
                velocidad_base = 30
                sigma_base = 12
                factor_calidad = 1.1
            else:
                tipo_via = 'jiron_comercial'
                velocidad_base = 35
                sigma_base = 15
                factor_calidad = 1.4
            
            # Asignar atributos al arco
            G[u][v][key]['tipo_via'] = tipo_via
            G[u][v][key]['velocidad_base'] = velocidad_base
            G[u][v][key]['sigma_base'] = sigma_base
            G[u][v][key]['factor_calidad'] = factor_calidad
            G[u][v][key]['length'] = length

        st.success(f"‚úÖ Grafo de Tacna cargado: {len(G.nodes)} nodos, {len(G.edges)} arcos")
        return G
        
    except Exception as e:
        st.error(f"‚ùå Error al cargar el grafo: {str(e)}")
        return None

# --- Interfaz de Usuario (Sidebar) ---
st.sidebar.header("‚öôÔ∏è Panel de Control del Sistema Experto")
st.sidebar.markdown("**Configuraci√≥n de Simulaci√≥n**")

# Activaci√≥n del modo de incidentes
modo_incidente_activo = st.sidebar.toggle(
    "üö® Activar Modo Emergencia", 
    value=False,
    help="Permite reportar incidentes haciendo clic en el mapa"
)

# Factores din√°micos seg√∫n especificaciones
st.sidebar.markdown("**Factores Din√°micos**")
perfil_horario = st.sidebar.selectbox(
    "Perfil de Congesti√≥n:",
    options=['valle', 'punta', 'noche'],
    index=1,
    help="Simula la congesti√≥n vehicular seg√∫n la hora del d√≠a"
)

condicion_clima = st.sidebar.selectbox(
    "Condiciones Clim√°ticas:",
    options=['despejado', 'lluvia'],
    help="Factor clim√°tico que afecta la velocidad en toda la red"
)

# Par√°metro de riesgo k para el modelo de costo dual
st.sidebar.markdown("**Par√°metros de Optimizaci√≥n**")
factor_riesgo_k = st.sidebar.slider(
    "Factor de Aversi√≥n al Riesgo (k):",
    min_value=0.0,
    max_value=3.0,
    value=1.5,
    step=0.1,
    help="Controla la importancia de la incertidumbre (œÉ) en la funci√≥n Costo_Seguro(e) = Œº(e) + k√óœÉ(e)"
)

# Informaci√≥n del modelo
st.sidebar.markdown("**Informaci√≥n del Modelo**")
st.sidebar.info("""
**Funciones de Costo Dual:**
- üèÉ‚Äç‚ôÇÔ∏è R√°pida: Costo(e) = Œº(e)
- üõ°Ô∏è Segura: Costo(e) = Œº(e) √ó f_seguridad(e)

**Factor de Seguridad:**
- Avenidas: 1.1√ó (m√°s tr√°fico)
- Colectoras: 1.05√ó (moderado)
- Residenciales: 0.95√ó (m√°s seguras)
- Comerciales: 1.15√ó (actividad intensa)

**Heur√≠stica A*:**
h(n) = Distancia_Geod√©sica / Velocidad_M√°xima

**Red Bidireccional:**
Todas las calles permiten tr√°fico en ambas direcciones
""")

# Cargar grafo principal
G = cargar_grafo_tacna()

if G is not None:
    # Preparar datos del sistema
    nodes_list = list(G.nodes())
    num_patrullas = min(5, len(nodes_list))
    patrol_nodes = random.sample(nodes_list, num_patrullas)

    # Informaci√≥n de patrullas con estado
    patrullas_data = []
    for i, node in enumerate(patrol_nodes):
        patrullas_data.append({
            'id': f"U-{i+1:02d}",
            'nodo_actual': int(node),
            'status': 'disponible'
        })

    # Preparar datos de nodos para JavaScript
    nodes_data = {}
    for node, data in G.nodes(data=True):
        if 'y' in data and 'x' in data:
            nodes_data[int(node)] = {
                'lat': float(data['y']), 
                'lon': float(data['x'])
            }

    # Preparar datos de arcos con modelo de costo
    edges_data = []
    for u, v, key, data in G.edges(data=True, keys=True):
        if int(u) in nodes_data and int(v) in nodes_data:
            edges_data.append({
                'source': int(u), 
                'target': int(v),
                'length': float(data.get('length', 100)),
                'tipo_via': data.get('tipo_via', 'jiron_comercial'),
                'velocidad_base': float(data.get('velocidad_base', 30)),
                'sigma_base': float(data.get('sigma_base', 15)),
                'factor_calidad': float(data.get('factor_calidad', 1.4))
            })

    # Estado del sistema
    st.markdown("### üìä Estado del Sistema")
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("üó∫Ô∏è Nodos", len(nodes_data))
    with col2:
        st.metric("üõ£Ô∏è Arcos", len(edges_data))
    with col3:
        st.metric("üöî Patrullas", len(patrullas_data))
    with col4:
        patrullas_disponibles = len([p for p in patrullas_data if p['status'] == 'disponible'])
        st.metric("‚úÖ Disponibles", patrullas_disponibles)

    # Informaci√≥n del modo actual
    if modo_incidente_activo:
        st.success("üö® **Modo Emergencia Activado:** Haga clic en el mapa para reportar un incidente")
    else:
        st.warning("‚ö†Ô∏è **Modo Emergencia Desactivado:** Active el interruptor en el panel lateral")

    # Mapa interactivo con sistema experto integrado
    st.markdown("### üó∫Ô∏è Mapa de Operaciones")
    
    # Crear HTML del mapa
    mapa_html = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <title>Sistema Experto de Emergencias</title>
        <meta charset="utf-8" />
        <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
        <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
        <style>
            #map {{ 
                height: 600px; 
                width: 100%; 
                cursor: {"crosshair" if modo_incidente_activo else "default"}; 
            }}
            .panel-recomendaciones {{
                position: absolute; 
                bottom: 10px; 
                right: 10px; 
                z-index: 1000;
                background: rgba(255, 255, 255, 0.95); 
                padding: 15px; 
                border-radius: 8px;
                box-shadow: 0 4px 15px rgba(0,0,0,0.2); 
                max-width: 450px; 
                max-height: 500px; 
                overflow-y: auto;
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            }}
            .patrol-disponible {{
                background: linear-gradient(135deg, #28a745, #20c997); 
                color: white; 
                border-radius: 50%;
                width: 32px; 
                height: 32px; 
                display: flex; 
                align-items: center; 
                justify-content: center;
                font-size: 11px; 
                font-weight: bold; 
                border: 2px solid white; 
                box-shadow: 0 2px 8px rgba(0,0,0,0.3);
            }}
            .patrol-ocupado {{
                background: linear-gradient(135deg, #6c757d, #495057); 
                color: white; 
                border-radius: 50%;
                width: 32px; 
                height: 32px; 
                display: flex; 
                align-items: center; 
                justify-content: center;
                font-size: 11px; 
                font-weight: bold; 
                border: 2px solid #adb5bd; 
                box-shadow: 0 2px 8px rgba(0,0,0,0.3);
                opacity: 0.8;
            }}
        </style>
    </head>
    <body>
        <div id="map"></div>
        
        <!-- Panel de Control del Grafo -->
        <div style="position: absolute; top: 10px; left: 10px; z-index: 1000; background: rgba(255, 255, 255, 0.95); padding: 10px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.2);">
            <button id="btn-grafo" onclick="toggleGrafoVisualizacion()" 
                    style="background: #17a2b8; color: white; border: none; padding: 8px 12px; border-radius: 5px; cursor: pointer; font-size: 12px; font-weight: bold;">
                üó∫Ô∏è Mostrar Grafo
            </button>
            <div style="margin-top: 5px; font-size: 10px; color: #666;">
                <div><b>Aristas (Calles):</b></div>
                <div>üü† Avenidas principales</div>
                <div>üü£ Calles colectoras</div>
                <div>üü¢ Calles residenciales</div>
                <div>üîµ Jirones comerciales</div>
                <div>‚ö´ Otros tipos</div>
            </div>
        </div>
        
        <div class="panel-recomendaciones" id="panel-recomendaciones">
            <h4>üéØ Sistema Experto de Decisi√≥n</h4>
            <div id="contenido-recomendaciones">
                <p style="color: #6c757d; font-style: italic;">
                    Esperando reporte de emergencia...
                </p>
                <small>Active el modo emergencia y haga clic en el mapa para comenzar.</small>
            </div>
        </div>
        
        <script>
            // --- Configuraci√≥n y Datos ---
            const MODO_EMERGENCIA = {str(modo_incidente_activo).lower()};
            const PERFIL_HORARIO = "{perfil_horario}";
            const CONDICION_CLIMA = "{condicion_clima}";
            const FACTOR_RIESGO_K = {factor_riesgo_k};

            const nodes = {json.dumps(nodes_data)};
            const edges = {json.dumps(edges_data)};
            const patrullas = {json.dumps(patrullas_data)};

            console.log(`Sistema inicializado: ${{Object.keys(nodes).length}} nodos, ${{edges.length}} arcos, ${{patrullas.length}} patrullas`);

            // --- Inicializaci√≥n del Mapa ---
            const map = L.map('map').setView([-18.0137, -70.2500], 14);
            L.tileLayer('https://{{s}}.tile.openstreetmap.org/{{z}}/{{x}}/{{y}}.png', {{ 
                attribution: '¬© OpenStreetMap contributors',
                maxZoom: 18
            }}).addTo(map);

            // --- Visualizaci√≥n de Patrullas ---
            patrullas.forEach(p => {{
                const nodePos = nodes[p.nodo_actual];
                if (nodePos) {{
                    p.marker = L.marker([nodePos.lat, nodePos.lon], {{
                        icon: L.divIcon({{ 
                            html: `<div class="patrol-${{p.status}}">${{p.id}}</div>`, 
                            iconSize: [32, 32], 
                            className: '' 
                        }})
                    }}).addTo(map).bindPopup(
                        `<b>Patrulla ${{p.id}}</b><br>
                         Estado: <span id="status-${{p.id}}">${{p.status}}</span><br>
                         <small>Nodo: ${{p.nodo_actual}}</small>`
                    );
                }}
            }});

            // Variables globales para visualizaci√≥n
            let marcadorIncidente, rutaRapidaLayer, rutaSeguraLayer, grafoLayer;
            let mostrarGrafo = false;

            // --- Visualizaci√≥n del Grafo de Red (Completa) ---
            function toggleGrafoVisualizacion() {{
                if (mostrarGrafo) {{
                    // Ocultar grafo
                    if (grafoLayer) {{
                        map.removeLayer(grafoLayer);
                        grafoLayer = null;
                    }}
                    mostrarGrafo = false;
                    document.getElementById('btn-grafo').innerHTML = 'üó∫Ô∏è Mostrar Grafo';
                    document.getElementById('btn-grafo').style.background = '#17a2b8';
                    
                    // Limpiar info del grafo
                    const infoGrafo = document.getElementById('info-grafo');
                    if (infoGrafo) {{
                        infoGrafo.remove();
                    }}
                }} else {{
                    // Mostrar grafo completo
                    mostrarGrafo = true;
                    document.getElementById('btn-grafo').innerHTML = 'üó∫Ô∏è Ocultar Grafo';
                    document.getElementById('btn-grafo').style.background = '#dc3545';
                    
                    // Crear grupo de capas para el grafo
                    grafoLayer = L.layerGroup();
                    
                    console.log(`üó∫Ô∏è Visualizando grafo completo: ${{edges.length}} aristas disponibles`);
                    
                    // Crear set para evitar aristas duplicadas en visualizaci√≥n
                    const aristasVisualizadas = new Set();
                    let aristasVisibles = 0;
                    
                    // Mostrar TODAS las aristas del grafo sin l√≠mite
                    edges.forEach(edge => {{
                        const sourceNode = nodes[edge.source];
                        const targetNode = nodes[edge.target];
                        
                        if (sourceNode && targetNode) {{
                            // Crear ID √∫nico para la arista (bidireccional)
                            const aristaId = `${{Math.min(edge.source, edge.target)}}-${{Math.max(edge.source, edge.target)}}`;
                            
                            // Solo agregar si no ha sido visualizada
                            if (!aristasVisualizadas.has(aristaId)) {{
                                aristasVisualizadas.add(aristaId);
                                
                                // Color y grosor seg√∫n tipo de v√≠a
                                let color, weight, opacity;
                                
                                switch(edge.tipo_via) {{
                                    case 'avenida_principal':
                                        color = '#FF6B35'; // Naranja para avenidas
                                        weight = 4;
                                        opacity = 0.8;
                                        break;
                                    case 'calle_colectora':
                                        color = '#7209B7'; // Morado para colectoras
                                        weight = 3;
                                        opacity = 0.7;
                                        break;
                                    case 'calle_residencial':
                                        color = '#2ECC71'; // Verde para residenciales
                                        weight = 2;
                                        opacity = 0.6;
                                        break;
                                    case 'jiron_comercial':
                                        color = '#3498DB'; // Azul para jirones
                                        weight = 2;
                                        opacity = 0.6;
                                        break;
                                    default:
                                        color = '#95A5A6'; // Gris para otros
                                        weight = 1;
                                        opacity = 0.5;
                                }}
                                
                                // Crear la l√≠nea del grafo
                                L.polyline([
                                    [sourceNode.lat, sourceNode.lon],
                                    [targetNode.lat, targetNode.lon]
                                ], {{
                                    color: color,
                                    weight: weight,
                                    opacity: opacity,
                                    interactive: true
                                }}).bindPopup(`
                                    <b>üõ£Ô∏è Conexi√≥n Vial</b><br>
                                    <b>Nodos:</b> ${{edge.source}} ‚Üî ${{edge.target}}<br>
                                    <b>Tipo:</b> ${{edge.tipo_via}}<br>
                                    <b>Longitud:</b> ${{edge.length.toFixed(1)}}m<br>
                                    <b>Velocidad base:</b> ${{edge.velocidad_base}} km/h<br>
                                    <b>Factor calidad:</b> ${{edge.factor_calidad}}<br>
                                    <small><i>Conexi√≥n bidireccional</i></small>
                                `).addTo(grafoLayer);
                                
                                aristasVisibles++;
                            }}
                        }}
                    }});
                    
                    // Agregar algunos nodos importantes como puntos de referencia
                    let nodosImportantes = 0;
                    Object.keys(nodes).forEach(nodeId => {{
                        const node = nodes[nodeId];
                        if (node && nodosImportantes < 100) {{ // Aumentar l√≠mite de nodos importantes
                            // Calcular conectividad del nodo
                            const conexionesEntrada = edges.filter(e => e.target == nodeId).length;
                            const conexionesSalida = edges.filter(e => e.source == nodeId).length;
                            const totalConexiones = conexionesEntrada + conexionesSalida;
                            
                            // Mostrar solo nodos con muchas conexiones (intersecciones importantes)
                            if (totalConexiones >= 4) {{
                                let color, radius;
                                if (totalConexiones >= 10) {{
                                    color = '#E74C3C'; radius = 8; // Rojo para super hubs
                                }} else if (totalConexiones >= 6) {{
                                    color = '#F39C12'; radius = 6; // Naranja para hubs importantes
                                }} else {{
                                    color = '#3498DB'; radius = 4; // Azul para intersecciones normales
                                }}
                                
                                L.circleMarker([node.lat, node.lon], {{
                                    radius: radius,
                                    fillColor: color,
                                    color: '#ffffff',
                                    weight: 2,
                                    opacity: 1,
                                    fillOpacity: 0.8
                                }}).bindPopup(`
                                    <b>üèõÔ∏è Intersecci√≥n Importante</b><br>
                                    <b>Nodo:</b> ${{nodeId}}<br>
                                    <b>Conexiones:</b> ${{totalConexiones}}<br>
                                    <b>Entrada:</b> ${{conexionesEntrada}}<br>
                                    <b>Salida:</b> ${{conexionesSalida}}<br>
                                    <b>Coordenadas:</b> [${{node.lat.toFixed(4)}}, ${{node.lon.toFixed(4)}}]
                                `).addTo(grafoLayer);
                                
                                nodosImportantes++;
                            }}
                        }}
                    }});
                    
                    // Agregar al mapa
                    grafoLayer.addTo(map);
                    
                    console.log(`‚úÖ Grafo completo visualizado: ${{aristasVisibles}} aristas √∫nicas, ${{nodosImportantes}} intersecciones importantes`);
                    
                    // Mostrar informaci√≥n del grafo
                    const infoDiv = document.createElement('div');
                    infoDiv.id = 'info-grafo';
                    infoDiv.style.cssText = `
                        position: absolute; 
                        bottom: 10px; 
                        left: 10px; 
                        background: rgba(255, 255, 255, 0.95); 
                        padding: 12px; 
                        border-radius: 8px; 
                        font-size: 11px; 
                        box-shadow: 0 2px 8px rgba(0,0,0,0.2);
                        z-index: 1000;
                        border-left: 4px solid #17a2b8;
                    `;
                    infoDiv.innerHTML = `
                        <b>üìä Red Vial Completa</b><br>
                        üõ£Ô∏è Aristas visualizadas: ${{aristasVisibles}}<br>
                        üèõÔ∏è Intersecciones importantes: ${{nodosImportantes}}<br>
                        üìà Conectividad: ${{((aristasVisibles / edges.length) * 100).toFixed(1)}}%<br>
                        <small><i>Todas las conexiones bidireccionales mostradas</i></small>
                    `;
                    document.body.appendChild(infoDiv);
                }}
            }}

            // --- Construcci√≥n de Lista de Adyacencia (Bidireccional) ---
            const listaAdyacencia = {{}};
            edges.forEach(edge => {{
                // Agregar conexi√≥n en ambas direcciones para grafos no dirigidos
                if (!listaAdyacencia[edge.source]) listaAdyacencia[edge.source] = [];
                if (!listaAdyacencia[edge.target]) listaAdyacencia[edge.target] = [];
                
                // Calcular factores din√°micos
                let factorCongestion = 1.0;
                if (PERFIL_HORARIO === "punta") {{
                    switch(edge.tipo_via) {{
                        case "avenida_principal": factorCongestion = 3.0; break;
                        case "calle_colectora": factorCongestion = 2.2; break;
                        case "calle_residencial": factorCongestion = 1.5; break;
                        default: factorCongestion = 1.8;
                    }}
                }} else if (PERFIL_HORARIO === "noche") {{
                    factorCongestion = 0.8;
                }}
                
                const factorClima = (CONDICION_CLIMA === "lluvia") ? 1.3 : 1.0;
                
                // Modelo probabil√≠stico - tiempo base
                const tiempoBase = edge.length / (edge.velocidad_base * 1000 / 3600);
                const muDinamico = tiempoBase * edge.factor_calidad * factorCongestion * factorClima;
                
                // Para ruta segura: penalizar seg√∫n tipo de v√≠a y factores de riesgo
                let penalizacionSeguridad = 1.0;
                switch(edge.tipo_via) {{
                    case "avenida_principal": 
                        penalizacionSeguridad = 1.1; // Ligeramente menos segura por tr√°fico
                        break;
                    case "calle_colectora": 
                        penalizacionSeguridad = 1.05; // Moderadamente segura
                        break;
                    case "calle_residencial": 
                        penalizacionSeguridad = 0.95; // M√°s segura, menos tr√°fico
                        break;
                    case "jiron_comercial": 
                        penalizacionSeguridad = 1.15; // Menos segura por actividad comercial
                        break;
                }}
                
                // Aplicar penalizaci√≥n por condiciones
                if (CONDICION_CLIMA === "lluvia") {{
                    penalizacionSeguridad *= 1.2; // Mayor riesgo en lluvia
                }}
                if (PERFIL_HORARIO === "noche") {{
                    penalizacionSeguridad *= 1.1; // Mayor riesgo nocturno
                }}
                
                const costoRapido = muDinamico;
                const costoSeguro = muDinamico * penalizacionSeguridad;

                // Agregar conexiones bidireccionales
                listaAdyacencia[edge.source].push({{
                    node: edge.target,
                    length: edge.length,
                    costo_rapido: costoRapido,
                    costo_seguro: costoSeguro,
                    tipo_via: edge.tipo_via
                }});
                
                listaAdyacencia[edge.target].push({{
                    node: edge.source,
                    length: edge.length,
                    costo_rapido: costoRapido,
                    costo_seguro: costoSeguro,
                    tipo_via: edge.tipo_via
                }});
            }});

            // --- Algoritmo A* ---
            function aStar(inicio, destino, tipoCosto) {{
                const tiempoInicio = performance.now();
                console.log(`üîç A* iniciado: ${{inicio}} ‚Üí ${{destino}} [${{tipoCosto}}]`);
                
                if (!nodes[inicio] || !nodes[destino]) {{
                    console.error(`‚ùå Nodos inv√°lidos`);
                    return null;
                }}
                
                if (inicio === destino) {{
                    return {{ path: [inicio], cost: 0, nodesExplored: 1 }};
                }}
                
                // Heur√≠stica admisible
                function heuristica(nodoA, nodoB) {{
                    const pA = nodes[nodoA];
                    const pB = nodes[nodoB];
                    if (!pA || !pB) return Infinity;
                    
                    const lat1 = pA.lat * Math.PI / 180;
                    const lat2 = pB.lat * Math.PI / 180;
                    const deltaLat = lat2 - lat1;
                    const deltaLon = (pB.lon - pA.lon) * Math.PI / 180;
                    
                    const a = Math.sin(deltaLat/2) * Math.sin(deltaLat/2) +
                            Math.cos(lat1) * Math.cos(lat2) *
                            Math.sin(deltaLon/2) * Math.sin(deltaLon/2);
                    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
                    const distancia = 6371000 * c;
                    
                    const velocidadMaxMs = 20;
                    return distancia / velocidadMaxMs;
                }}
                
                const openSet = new Set([inicio]);
                const closedSet = new Set();
                const cameFrom = new Map();
                const gScore = new Map([[inicio, 0]]);
                const fScore = new Map([[inicio, heuristica(inicio, destino)]]);
                
                let nodosExplorados = 0;
                const maxIteraciones = 5000;
                const maxTiempo = 6000;
                
                while (openSet.size > 0 && nodosExplorados < maxIteraciones) {{
                    if (performance.now() - tiempoInicio > maxTiempo) {{
                        console.warn(`‚è∞ Timeout alcanzado`);
                        break;
                    }}
                    
                    let actual = null;
                    let menorF = Infinity;
                    for (let nodo of openSet) {{
                        const f = fScore.get(nodo) || Infinity;
                        if (f < menorF) {{
                            menorF = f;
                            actual = nodo;
                        }}
                    }}
                    
                    if (!actual) break;
                    
                    nodosExplorados++;
                    
                    if (actual === destino) {{
                        const ruta = [];
                        let temp = actual;
                        while (temp !== undefined) {{
                            ruta.unshift(temp);
                            temp = cameFrom.get(temp);
                        }}
                        const tiempoTotal = performance.now() - tiempoInicio;
                        console.log(`‚úÖ Ruta encontrada en ${{tiempoTotal.toFixed(0)}}ms: ${{ruta.length}} nodos`);
                        return {{ 
                            path: ruta, 
                            cost: gScore.get(destino), 
                            nodesExplored: nodosExplorados,
                            timeMs: tiempoTotal
                        }};
                    }}
                    
                    openSet.delete(actual);
                    closedSet.add(actual);
                    
                    const vecinos = listaAdyacencia[actual] || [];
                    for (let vecino of vecinos) {{
                        const nodoVecino = vecino.node;
                        
                        if (closedSet.has(nodoVecino)) continue;
                        
                        const costoTentativo = gScore.get(actual) + vecino[tipoCosto];
                        
                        const costoActual = gScore.get(nodoVecino);
                        if (costoActual === undefined || costoTentativo < costoActual) {{
                            cameFrom.set(nodoVecino, actual);
                            gScore.set(nodoVecino, costoTentativo);
                            fScore.set(nodoVecino, costoTentativo + heuristica(nodoVecino, destino));
                            
                            if (!openSet.has(nodoVecino)) {{
                                openSet.add(nodoVecino);
                            }}
                        }}
                    }}
                }}
                
                console.log(`‚ùå No se encontr√≥ ruta despu√©s de ${{nodosExplorados}} nodos`);
                return null;
            }}

            // --- Manejo de Eventos de Emergencia ---
            map.on('click', function(e) {{
                if (!MODO_EMERGENCIA) return;
                
                const coordsIncidente = e.latlng;
                console.log(`üö® Emergencia reportada en: [${{coordsIncidente.lat.toFixed(6)}}, ${{coordsIncidente.lng.toFixed(6)}}]`);
                
                // Mostrar indicador de carga
                document.getElementById('contenido-recomendaciones').innerHTML = `
                    <div style="text-align: center; padding: 20px;">
                        <h5>üö® Procesando Emergencia</h5>
                        <div style="margin: 15px 0;">
                            <div style="display: inline-block; width: 20px; height: 20px; border: 3px solid #f3f3f3; border-top: 3px solid #3498db; border-radius: 50%; animation: spin 1s linear infinite;"></div>
                        </div>
                        <p>Calculando rutas √≥ptimas...</p>
                        <style>
                            @keyframes spin {{ 0% {{ transform: rotate(0deg); }} 100% {{ transform: rotate(360deg); }} }}
                        </style>
                    </div>`;
                
                // Limpiar marcadores anteriores
                if (marcadorIncidente) map.removeLayer(marcadorIncidente);
                if (rutaRapidaLayer) map.removeLayer(rutaRapidaLayer);
                if (rutaSeguraLayer) map.removeLayer(rutaSeguraLayer);
                
                // Crear marcador de emergencia
                marcadorIncidente = L.marker(coordsIncidente, {{ 
                    icon: L.divIcon({{ 
                        html: 'üö®', 
                        className: 'incident-marker', 
                        iconSize: [40, 40],
                        iconAnchor: [20, 20]
                    }}) 
                }}).addTo(map).bindPopup("<b>üö® EMERGENCIA</b><br>Calculando respuesta √≥ptima...").openPopup();
                
                setTimeout(() => {{
                    procesarEmergencia(coordsIncidente);
                }}, 100);
            }});
            
            // --- Funci√≥n de Procesamiento de Emergencia ---
            function procesarEmergencia(coordsIncidente) {{
                try {{
                    // Encontrar nodo m√°s cercano
                    let nodoDestino = null;
                    let distanciaMinima = Infinity;
                    
                    Object.keys(nodes).forEach(nodeId => {{
                        const posNodo = L.latLng(nodes[nodeId].lat, nodes[nodeId].lon);
                        const distancia = posNodo.distanceTo(coordsIncidente);
                        if (distancia < distanciaMinima) {{
                            distanciaMinima = distancia;
                            nodoDestino = parseInt(nodeId);
                        }}
                    }});
                    
                    if (!nodoDestino) {{
                        document.getElementById('contenido-recomendaciones').innerHTML = 
                            "<div style='color: #dc3545; font-weight: bold; padding: 15px;'>‚ùå Error: Ubicaci√≥n no accesible</div>";
                        return;
                    }}
                    
                    console.log(`üìç Nodo destino: ${{nodoDestino}}, distancia: ${{distanciaMinima.toFixed(1)}}m`);
                    
                    // Evaluar patrullas disponibles
                    const patrullasDisponibles = patrullas.filter(p => p.status === 'disponible');
                    
                    if (patrullasDisponibles.length === 0) {{
                        document.getElementById('contenido-recomendaciones').innerHTML = 
                            "<div style='color: #dc3545; font-weight: bold; padding: 15px;'>‚ö†Ô∏è No hay patrullas disponibles</div>";
                        return;
                    }}
                    
                    let candidatos = [];
                    
                    for (let p of patrullasDisponibles) {{
                        const resultado = aStar(p.nodo_actual, nodoDestino, 'costo_rapido');
                        
                        if (resultado && resultado.path && resultado.path.length > 0) {{
                            candidatos.push({{ 
                                patrulla: p, 
                                tiempo: resultado.cost,
                                nodosExplorados: resultado.nodesExplored
                            }});
                            console.log(`‚úÖ Ruta para ${{p.id}}: ${{resultado.cost.toFixed(2)}}s`);
                        }} else {{
                            console.log(`‚ùå Sin ruta v√°lida para ${{p.id}}`);
                        }}
                    }}
                    
                    if (candidatos.length === 0) {{
                        document.getElementById('contenido-recomendaciones').innerHTML = 
                            "<div style='color: #dc3545; font-weight: bold; padding: 15px;'>‚ùå No se encontr√≥ una ruta v√°lida</div>";
                        return;
                    }}
                    
                    // Seleccionar mejor patrulla
                    candidatos.sort((a, b) => a.tiempo - b.tiempo);
                    const mejorPatrulla = candidatos[0].patrulla;
                    
                    console.log(`üèÜ Mejor patrulla: ${{mejorPatrulla.id}} con tiempo: ${{candidatos[0].tiempo.toFixed(2)}}s`);
                    
                    setTimeout(() => {{
                        calcularRutasDuales(mejorPatrulla, nodoDestino);
                    }}, 100);
                    
                }} catch (error) {{
                    console.error('‚ùå Error en procesarEmergencia:', error);
                    document.getElementById('contenido-recomendaciones').innerHTML = 
                        `<div style='color: #dc3545; font-weight: bold; padding: 15px;'>‚ùå Error: ${{error.message}}</div>`;
                }}
            }}
            
            // --- Funci√≥n para Calcular Rutas Duales ---
            function calcularRutasDuales(mejorPatrulla, nodoDestino) {{
                try {{
                    document.getElementById('contenido-recomendaciones').innerHTML = `
                        <div style="text-align: center; padding: 15px;">
                            <h5>üéØ Calculando rutas para ${{mejorPatrulla.id}}</h5>
                            <p>Generando recomendaciones...</p>
                        </div>`;
                    
                    // Calcular ambas rutas
                    const rutaRapida = aStar(mejorPatrulla.nodo_actual, nodoDestino, 'costo_rapido');
                    const rutaSegura = aStar(mejorPatrulla.nodo_actual, nodoDestino, 'costo_seguro');
                    
                    if (!rutaRapida) {{
                        document.getElementById('contenido-recomendaciones').innerHTML = 
                            "<div style='color: #dc3545; font-weight: bold; padding: 15px;'>‚ùå Error: No se pudo calcular la ruta</div>";
                        return;
                    }}
                    
                    function formatearTiempo(segundos) {{
                        if (!isFinite(segundos)) return "‚àû";
                        const mins = Math.floor(segundos / 60);
                        const segs = Math.round(segundos % 60);
                        return `${{mins}}:${{segs.toString().padStart(2, '0')}}`;
                    }}
                    
                    let htmlRecomendaciones = `<h5>üéØ An√°lisis para ${{mejorPatrulla.id}}</h5>`;
                    
                    // Visualizar ruta r√°pida
                    if (rutaRapida && rutaRapida.path) {{
                        const coordsRuta = rutaRapida.path.map(n => [nodes[n].lat, nodes[n].lon]);
                        rutaRapidaLayer = L.polyline(coordsRuta, {{ 
                            color: '#e74c3c', 
                            weight: 6, 
                            opacity: 0.9 
                        }}).addTo(map);
                        
                        htmlRecomendaciones += `
                        <div style="border-left: 5px solid #e74c3c; padding: 12px; margin: 8px 0; background: #fff5f5; border-radius: 5px;">
                            <b>1. üèÉ‚Äç‚ôÇÔ∏è Ruta R√°pida</b><br>
                            ‚è±Ô∏è Tiempo: ${{formatearTiempo(rutaRapida.cost)}}<br>
                            üìç Nodos: ${{rutaRapida.path.length}}<br>
                            üîç Explorados: ${{rutaRapida.nodesExplored}}<br>
                            üßÆ Funci√≥n: Œº(e)
                        </div>`;
                    }}
                    
                    // Visualizar ruta segura
                    if (rutaSegura && rutaSegura.path) {{
                        const coordsRuta = rutaSegura.path.map(n => [nodes[n].lat, nodes[n].lon]);
                        rutaSeguraLayer = L.polyline(coordsRuta, {{ 
                            color: '#3498db', 
                            weight: 6, 
                            opacity: 0.9,
                            dashArray: '15, 8'
                        }}).addTo(map);
                        
                        const diferencia = rutaSegura.cost - rutaRapida.cost;
                        const porcentaje = ((diferencia / rutaRapida.cost) * 100).toFixed(1);
                        
                        htmlRecomendaciones += `
                        <div style="border-left: 5px solid #3498db; padding: 12px; margin: 8px 0; background: #f0f8ff; border-radius: 5px;">
                            <b>2. üõ°Ô∏è Ruta Segura</b><br>
                            ‚è±Ô∏è Tiempo: ${{formatearTiempo(rutaSegura.cost)}}<br>
                            üìç Nodos: ${{rutaSegura.path.length}}<br>
                            üîç Explorados: ${{rutaSegura.nodesExplored}}<br>
                            üìä Diferencia: +${{formatearTiempo(diferencia)}} (+${{porcentaje}}%)<br>
                            üßÆ Funci√≥n: Œº(e) + ${{FACTOR_RIESGO_K}}√óœÉ(e)
                        </div>`;
                    }}
                    
                    // Panel de decisi√≥n
                    htmlRecomendaciones += `
                    <div style="background: #f8f9fa; padding: 12px; border-radius: 5px; margin: 10px 0;">
                        <h6>ü§ñ Recomendaci√≥n:</h6>
                        <p style="font-size: 0.9em;">
                            ${{rutaSegura && (rutaSegura.cost - rutaRapida.cost) / rutaRapida.cost < 0.3 ? 
                                "üõ°Ô∏è Se recomienda la ruta segura" : 
                                "‚ö° Se recomienda la ruta r√°pida"}}
                        </p>
                    </div>
                    <div style="text-align: center; margin-top: 15px;">
                        <button onclick="asignarPatrulla('${{mejorPatrulla.id}}', 'rapida')" 
                                style="background: #e74c3c; color: white; border: none; padding: 10px 16px; margin: 5px; border-radius: 5px; cursor: pointer; font-weight: bold;">
                            üèÉ‚Äç‚ôÇÔ∏è Asignar Ruta R√°pida
                        </button>
                        ${{rutaSegura ? `<button onclick="asignarPatrulla('${{mejorPatrulla.id}}', 'segura')" 
                                style="background: #3498db; color: white; border: none; padding: 10px 16px; margin: 5px; border-radius: 5px; cursor: pointer; font-weight: bold;">
                            üõ°Ô∏è Asignar Ruta Segura
                        </button>` : ''}}
                    </div>`;
                    
                    document.getElementById('contenido-recomendaciones').innerHTML = htmlRecomendaciones;
                    
                }} catch (error) {{
                    console.error('‚ùå Error en calcularRutasDuales:', error);
                }}
            }}

            // --- Funci√≥n de Asignaci√≥n de Patrulla ---
            window.asignarPatrulla = function(idPatrulla, tipoRuta) {{
                console.log(`Asignando ${{idPatrulla}} con ruta ${{tipoRuta}}`);
                
                const patrulla = patrullas.find(p => p.id === idPatrulla);
                if (patrulla) {{
                    patrulla.status = 'en_ruta';
                    patrulla.marker.setIcon(L.divIcon({{ 
                        html: `<div class="patrol-ocupado">${{patrulla.id}}</div>`, 
                        iconSize: [32, 32], 
                        className: '' 
                    }}));
                    
                    const tipoTexto = tipoRuta === 'rapida' ? 'R√°pida ‚ö°' : 'Segura üõ°Ô∏è';
                    const mensaje = `‚úÖ ${{patrulla.id}} despachada<br>üìç Ruta: ${{tipoTexto}}<br>üöÄ Estado: En camino`;
                    
                    document.getElementById('contenido-recomendaciones').innerHTML = `
                        <div style="color: #28a745; font-weight: bold; padding: 20px; background: #d4edda; border-radius: 8px; border: 2px solid #c3e6cb; text-align: center;">
                            ${{mensaje}}
                        </div>`;
                }}
            }}

            // --- Hacer funci√≥n global ---
            window.toggleGrafoVisualizacion = toggleGrafoVisualizacion;
        </script>
    </body>
    </html>
    """

    # Mostrar el mapa
    components.html(mapa_html, height=650)

    # Informaci√≥n adicional
    st.markdown("### üìà Informaci√≥n del Modelo")
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown(f"""
        **‚ö° Modelo de Costos Mejorado:**
        - Ruta R√°pida: `Costo(e) = Œº(e)`
        - Ruta Segura: `Costo(e) = Œº(e) √ó f_seguridad(e)`
        - Perfil horario: **{perfil_horario}**
        - Condici√≥n clim√°tica: **{condicion_clima}**
        - **Red bidireccional completa**
        """)
    
    with col2:
        st.markdown("""
        **üéØ Algoritmo A* Optimizado:**
        - Heur√≠stica: `h(n) = Distancia/Velocidad_M√°x`
        - L√≠mite tiempo: 6 segundos por b√∫squeda
        - L√≠mite iteraciones: 5,000 nodos
        - **Conectividad bidireccional garantizada**
        - **Factores de seguridad aplicados por tipo de v√≠a**
        """)

    # Estado actual del sistema
    st.markdown("### üîÑ Estado Actual")
    estado_df = pd.DataFrame(patrullas_data)
    st.dataframe(estado_df, hide_index=True)

else:
    st.error("‚ùå No se pudo cargar el grafo de Tacna. Verifique la conexi√≥n a internet y reinicie la aplicaci√≥n.")
    st.info("üí° **Sugerencia:** Aseg√∫rese de tener una conexi√≥n estable a internet para descargar los datos de OpenStreetMap.")
